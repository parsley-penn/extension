{"version":3,"sources":["main.js"],"names":["isWord","syntaxTree","hasOwnProperty","isSentence","label","isPhrase","makeSafeLabel","getDisplayWord","word","map","Word","props","safeLabel","leaf","displayWord","Phrase","children","tree","child","index","Error","FormattedText","sentences","sentence","React","Component","getQueryMap","query","vars","split","i","length","pair","decodeURIComponent","jQuery","$","window","location","search","substring","text","getJSON","done","data","ReactDOM","render","document","getElementById","fail","console","error","formatting","append"],"mappings":"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","file":"main.es6.js","sourcesContent":["function isWord(syntaxTree) {\n  return syntaxTree && syntaxTree.hasOwnProperty('word') && !syntaxTree.hasOwnProperty('children');\n}\n\nfunction isSentence(syntaxTree) {\n  return syntaxTree && syntaxTree.label === 'S' && syntaxTree.hasOwnProperty('children');\n}\n\nfunction isPhrase(syntaxTree) {\n  return syntaxTree && syntaxTree.label !== 'ROOT' && syntaxTree.hasOwnProperty('children');\n}\n\nfunction makeSafeLabel(label) {\n  if (label === '``') {\n    return 'left-double-quote';\n  } else if (label === '\\'\\'') {\n    return 'right-double-quote';\n  } else if (label === '.') {\n    return 'period';\n  } else if (label === ',') {\n    return 'comma';\n  } else {\n    return label;\n  }\n}\n\nfunction getDisplayWord(word) {\n  var map = {\n    '-LRB-': '(',\n    '-RRB-': ')',\n    '``': '“',\n    '\\'\\'': '”'\n  }\n  \n  return map[word] || word;\n}\n\nfunction Word(props) {\n  const safeLabel = makeSafeLabel(props.leaf.label);\n  const displayWord = getDisplayWord(props.leaf.word);\n  return (\n    <span className={ 'word label-' + safeLabel }>\n      { displayWord }\n    </span>\n  );\n}\n\nfunction Phrase(props) {\n  const children = props.tree.children.map((child, index) => {\n    if (isWord(child)) {\n      return <Word key={index} leaf={child} />;\n    } else if (isPhrase(child)) {\n      return <Phrase key={index} tree={child}/>\n    } else {\n      throw new Error('Unexpected child');\n    }\n  });\n\n  return (\n    <span className={ 'phrase label-' + props.tree.label }>\n      { children }\n    </span>\n  );\n}\n\nclass FormattedText extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  \n  render() {\n    let sentences;\n    \n    if (isSentence(this.props.tree)) {\n      sentences = <Phrase tree={this.props.tree} />;\n    } else {\n      sentences = this.props.tree.map((sentence, index) => {\n        return <Phrase key={index} tree={sentence} />;\n      });\n    }\n    \n    return (\n      <div className=\"formattedText\">\n        {sentences}\n      </div>\n    );\n  }\n};\n\n// Function for getting parts of query variable\n// Source: http://stackoverflow.com/questions/2090551/parse-query-string-in-javascript\nfunction getQueryMap(query) {\n    var vars = query.split('&');\n    var map = {};\n    for (var i = 0; i < vars.length; i++) {\n        var pair = vars[i].split('=');\n        map[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n    }\n    return map;\n}\n\njQuery(function($){\n  // Load text from JSON\n  const query = getQueryMap(window.location.search.substring(1));\n\n  const text = query['text'];\n\n  $.getJSON(`texts/${text}.json`)\n    .done(function(data) {\n      ReactDOM.render(\n        <FormattedText tree={ data } />,\n        document.getElementById('root')\n      );\n    })\n    .fail(function() {\n      console.error('could not load json');\n    });\n\n  // Load formatting dynamically\n  const formatting = query['formatting'];\n\n  $('head').append(`<link rel=\"stylesheet\" type=\"text/css\" href=\"css/formatting/${formatting}.css\">`);\n});"]}